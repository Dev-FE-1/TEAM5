
/* 기본 스타일 */
.container {
  margin: 0 auto;
  height: 100vh;
  /* background-color: aqua; */
  /* 컨테이너에 또 뭐가 들어가야 하나요?  */
}


/* 마이페이지(프로필,출퇴근,공지사항,근태관리)  */
.content {
  display: flex;
  flex-wrap: wrap;
  /* justify-content: center; */
  justify-content: space-evenly;
  padding: 30px;
  /* flex: 1; */
  gap: 30px;
  /* background-color: yellow; */
  height: 80vh;
}

/* 피드백
**  다음과 같이 HTML 테그에는 공백을 통해 class를 여러 개 달 수도 있습니다.
**  <div class="class1 class2">
**  이 부분은 4개의 컨텐츠의 공통된 속성들이므로 content class 같은 걸 만들어서 하나로 관리하면 좋을 것 같습니다.
** ex) <div class="profile content"> (profile class는 profile에서 특별히 필요한 속성만 관리)
** 상단의 content class를 content-container로 바꿔서 content를 담는 부모요소임을 알 수 있게 하는 것도 좋아보입니다.
*/ 
.profile, .commutes, .notices, .attends  {
  flex: 1 1 calc(50% - 20px);
  gap: 30px;
  padding: 20px;
  background-color: #fff;
  border: 3px solid var(--primary);
  box-sizing: border-box;
  /* min-width: 250px; */
  border-radius: 10px;
}

/* 피드백
** 이 부분도 공통된 class로 관리 되고 있었다면 .content h2로 간단하게 표시할 수 있겠죠?
*/ 
.profile h2, .commutes h2, .notices h2, .attends h2  {
  margin-bottom: 20px;
  font-weight: bold;
  font-size: 24px;
  /* text-align: center; */
}

/* 프로필 */

.profile img {
  width: 113.3px;
  height: 151.1px;  /* 이미지사이즈 */
  margin-bottom: 20px;
}

.profile p {
  margin-bottom: 20px;
}


/* 피드백
** 특별한 경우가 아니라면 button이나 제목 등은 공통된 스타일이 있는 편이 디자인적으로 좋습니다.
** 현재 프로필, 타이머, 근태현황에서 모두 다른 스타일의 버튼이 사용되고 있습니다.
** 상단에 .button 같은 걸 만들어서 일반적인 버튼에 대한 공통 스타일을 만들고, 다른 속성이 필요한 부분에서만 스타일을 추가하는 건 어떨까요? 
*/ 
.profile button {
  padding: 5px 10px;
  border-radius: 15px;
  border: none;
  height: 40px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  background-color: var(--primary-300);
  color: #fff;
}

.profile button:hover {
  background-color: var(--primary-500);
}

/* 출퇴근 */

.work-timer {
  align-items: center; /* 수평 가운데 정렬 */
  text-align: center; /* 텍스트 가운데 정렬 */
}

.work-timer .timer {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;   /*피드백: margin이 2번 선언 되어있습니다. */
  font-size: 24px;
  font-weight: bold;
  color: var(--primary);
  background-color: #fff; /*피드백: 배경색상은 부모요소에서 이어받습니다. 상단의 .commut에 배경 흰색이 지정되어있으니 없어도 상관없습니다.*/
  border: 4px solid var(--primary);
  border-radius: 50%;
  width: 200px;
  height: 200px;  
  margin: 0 auto;
  margin-bottom: 20px;
}

.commutes p .badge {
  background-color: var(--primary-400);
  color: #fff;
  padding: 5px 10px;
  border-radius: 15px;
  font-size: 14px;
  display: inline-block;
  margin-bottom: 20px;
}

.work-controls {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 20px;
}

/* 피드백
** 공통된 부분은 따로 class로 묶는 것이 좋겠죠?
*/ 
.work-controls .start, 
.work-controls .stop {
  padding: 10px 20px;
  border-radius: 5px;
  font-size: 16px;
  color: #fff;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.work-controls .start {
  background-color: #28a745;
}

.work-controls .stop {
  background-color: #dc3545;
}
/* 피드백
** :hover 스타일은 해당 요소의 바로 밑에 있는 것이 좋습니다. 
*/ 
.work-controls .start:hover {
  background-color: #218838;
}

.work-controls .stop:hover {
  background-color: #c82333;
}

.switch {
  position: relative;
  display: inline-block;
  width: 40px;
  height: 24px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  transition: .4s;
  border-radius: 50px;
}

.slider:before {
  position: absolute;
  content: "";
  height: 16px;
  width: 16px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  transition: .4s;
  border-radius: 50%;
}

input:checked + .slider {
  background-color: #28a745;
}

input:checked + .slider:before {
  transform: translateX(16px);
}



/* 공지사항 */
 .notices p {
  border-bottom: 1px solid #ddd;
  margin-bottom: 50px;
  padding: 8px 0;
 }







/* 근태현황 */

.attends-list {
  margin-bottom: 50px;
}

/* 피드백
** 고민하시던 이 부분은 flex보다 grid가 조금 더 적합해보여서 수정해봤습니다. 
** 맘에 드신다면 쓰시고 다른 해법을 찾아보시는 것도 좋습니다.
** 추가로 
*/ 
.attends-header,
.attends-item {
  /* display: flex; */
  /* justify-content: space-between; */
  /* align-items: center; */
  display: grid;
  grid-template-columns: 45px 90px 1fr 50px;
  gap: 15px;
  padding: 16px 0;
  border-bottom: 1px solid #ddd;
}

/* .attends-header span,
.attends-item span {
  text-align: center;
} */

.attends-item .badge {
  background-color: var(--primary-400);
  color: #fff;
  padding: 2px 8px;
  border-radius: 15px;
  font-size: 14px;
  display: inline-block;
  text-align: center;
  white-space: nowrap; /* 배지의 글자가 길어지지 않도록 설정 */
}


.attends-button {
  padding: 5px 10px;
  border-radius: 5px;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s ease;
  background-color: #28a745;
  color: #fff;
  display: block;
  margin: 15px 0 0 auto;
  font-size: 14px;
  float: right;
}

.attends-button:hover {
  background-color: yellowgreen;
}


/* 모달 GPT꺼니까 다시 스스로 해보기 */
/* .modal {
  position: absolute;
  width: 100%;
  height: 100%;
  display: none;

  justify-content: center;
  top:0;
  left:0;

  background-color: rgba(0,0,0,0.4); 설명상으론 모달창이 띄어졌을때, 배경화면 흐리게 하는 것이라고 함
}

.modal-profile {
  position:absolute;
  top:50%; 모달을 화면가운데 놓기위함
  left: 40%;
  padding:40px;  

  width:400px;
  height:600px;

  text-align: center;

  background-color: rgb(255,255,255); 모달창 배경색 흰색
  border-radius:10px; 테두리
  box-shadow:0 2px 3px 0 rgba(34,36,38,0.15); 테두리 그림자
  color: var(--primary);

  transform:translateY(-50%); 모듈창열었을때 위치설정 가운데로

}

.modal-profile h2 {
  margin-bottom: 30px;
}

.modal-profile ul li {
  margin-bottom: 30px;
} */